<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chaospace</title>
  <subtitle>Reshape the world by engineering chaos</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fengchao.github.io/"/>
  <updated>2017-03-22T09:55:59.000Z</updated>
  <id>https://fengchao.github.io/</id>
  
  <author>
    <name>Feng Chao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Wen Quan Yi</title>
    <link href="https://fengchao.github.io/2017/03/22/Wen-Quan-Yi/"/>
    <id>https://fengchao.github.io/2017/03/22/Wen-Quan-Yi/</id>
    <published>2017-03-22T09:55:18.000Z</published>
    <updated>2017-03-22T09:55:59.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>蓋文字者，經藝之本，王政之始</p><p>——说文解字序 许慎（东汉） 让汉字永远自由</p><p>也许现在你已经习惯每天面对电脑浏览互联网上的中文信息，和亲朋好友收发中文邮件或者习惯用手机接受别人发来的中文短信。如果有人告诉你这些汉字并非时免费使用的，都属于某个商业公司所有，你会有什么样的感受呢？</p><p>汉字成为私人产品</p><p>在计算机进入中国之初并不能显示汉字，而当时汉字显示的技术有着巨大的利润空间，产生了利用硬件字库（如我们常说的汉卡）和软字库两种显示汉字的技术。当 微软推出了Windows 95操作系统后，安装了Windows 95操作系统的个人电脑不再需要额外的汉卡支持汉字的显示，代替汉卡的就是现在经常谈到的汉字字库的显示方式。</p><p>无论是那种方式，他们都需要使用汉字的点阵字库，但正是汉字显示技术的兴起，促成了国家标准点阵汉字标准的出现。</p><p>汉字的电子化具有一定公共性、也关系到能否自由顺畅的进行中文电子信息交流。字库的开发虽然具有巨大的市场利益，但还需要组织巨大的人力物力 开进行开发，而且这些字库的开发并不是一两个人花一两年时间就可以做到的，所以国家采取了授权中国标准技术开发公司等专门从事汉字字库字模及其周边开发的 企业进行研发。最后形成的标准归国家并强制执行，而具体的字库字形内容归企业所有。</p><p>在国家强制标准的推动之下，这一事实垄断造成无论是谁，只要使用中文电子汉字都必须向这些把握汉字字体的公司付费，同时这也造成不同字体之间显示的差异。</p><p>小知识</p><p>字库是储存在电脑、手机等设备里的文字仓库，汉字的显示就是从这些仓库中找到对应的汉字。但汉字数目巨大，如果全部制作出来，其数字内容的大 小将异常庞大。不过常用的汉子只有寥寥数千字，所以国家和相关企业选取了汉字里面的常用字制作了国家标准和相应的字库。不过就算这样，一套精美的汉字字库 从设计到最后成型，也需要2~3年的时间，所以汉字字库的价格昂贵。</p><p>自由字库欲破字库垄断</p><p>手机、终端设备、显示仪器、仪表等一切电子汉字显示打印等产品和设备都需要汉字字体，因为国家指定了GB18030作为全国的汉字编码标准并且强制实施，按理说应该有一套免费字库给公众使用，但事实上却没有一套可供使用的免费的字库。</p><p>原因在于购买一整套汉字字体的费用是巨大的，而不同公司的字库大小和汉字个数的不同造成了中文电子汉字显示方面的麻烦。鉴于此，香港、台湾地 区提供了相应的满足汉字标准要求的字体，放在网上供个人免费使用。特别是2005年12月23日，东京大学的坂村健教授等人，将目前收录字数最多的汉字字 体集对软件开发公司无偿公开，坂村健认为“一种类似社会基础设施的产品向用户征收费用是不对的，这样做还会阻碍计算机行业的发展，庞大的基础设施应该是免 费提供的”。</p><p>相比之下，大陆至今没有一个好用的开源字库，所以，微软公司使用的中文字体也都是从国内的商业公司手中买来的。</p><p>要让公众拥有一套免费的开源字体，解决这个问题的方法有两个途径：政府通过强制或收购具有版权的整套字体获得无限授权，向公众开放字体的使用。或者通过某个个体或者组织自己重新一点一点地制作出整套不同字形的汉字。</p><p>由于没有公司愿意公开其私有字形字库免费给消费者使用，特别是在GNU/Linux领域，怀着让每一个中文电脑用户受益的计划，文泉驿这个朝着自由开放的汉字进军的开发项目应运而生。</p><p>自由字库正在进行时</p><p>文泉驿是一群致力于在计算机世界中推广汉字，丰富电子汉字资源的志愿者组成的非赢利性组织。他们希望通过志愿者无私的劳动，使得所有人无论在世界上任何一个角落，无论在什么不同的系统下都可以免费地获得电子汉字资源，能够流畅地通过汉字进行交流。</p><p>文泉驿将开发一套完整的、美观的、基于自由软件原则的汉字字库，将包含各个大小的点阵汉字以及标准宋体、细宋体、报宋体、黑体的矢量汉字（可以无限放缩）。如果条件可能，还将制作隶书、行书等矢量艺术字体。</p><p>这些字体将覆盖Unicode标准4.0所收录的7万多中日韩汉字。这个字库将允许Linux用户、Windows用户、Mac用户、Unix和PalmOS等主流操作系统的用户免费获得和使用，从而实现中文的无障碍交流。</p><p>文泉驿表示已经在Sourceforge.net立项，所开发出来的汉字字体，包括点阵字体和矢量字体，将选择使用自由软件形式的授权（GPL或 者其他合适的授权形式），为了防止版权被其他商业机构利用，这些字体的版权将归文泉驿信任委员会（由会员产生）所有，文泉驿信任委员会承认参与者对相应的 字体创造性开发拥有署名权。</p><p>目前，文泉驿项目已经有了很大的进展。只要每个愿意为之付出努力的公众抽出一天哪怕几分钟的时间描出一个字，将极大地缩短开源中文字体的最终面世时间。</p><p>我们也期望让汉字无障碍地自由使用的那一天早点到来。</p><p>开源汉字的领军人物——房骞骞</p><p>房骞骞简介：1995年从河南考入电子科技大学微波工程系。2000年9月在美国的达特茅斯学院（Dartmouth College）攻读博士学位，方向是微波医学成像。毕业后在波士顿麻省总医院Martinos生物医学成像中心作博士后，研究课题是肿瘤的红外激光成像 技术。</p><p>房骞骞是文泉驿项目的负责人，自小就对中国传统文化有很浓厚的兴趣，由于他的家乡是甲骨文的发源地，因此他对文字的兴趣尤为强烈。房骞骞的研究课题和文字毫不相关，他为何会投身到开源汉字的创作中呢？记者为此采访了他。</p><p>文泉驿的诞生</p><p>房骞骞告诉记者：“当初想到做这个项目可能有两个方面的原因”。在2002年的时候，房骞骞在编写一个“数学软件常见问题集(FAQ)”的电 子文档，他选择了一个Wiki引擎——UseModWiki，这样所有人都可以参与改进这个文档。再对UseModWiki进行改进的过程中，他被 UseModWiki代码的简练和强大的功能所吸引。</p><p>同时由于工作关系，他需要完全转换到Linux下工作，于是曾经困扰过他很久的中文问题再次成为他工作的一个主要障碍。于是，他萌生了使用Javascript扩展Wiki页面编辑器来从事特殊性文档——中文字体协同开发的想法。</p><p>“Wiki本身具备支持大规模、并行化、分布式开发的优势，加之字体开发本身，可并行化、颗粒化（granularity）的特性非常好”， 于是他自己经过一两天调研、代码改造，并写了一些简单的说明文字，于2004年10月27日正式成立了这个项目，当时的名字叫做“点阵中文Wiki”。当 时，整个过程都是他一个人完成的。</p><p>在中文社区，开源的中文字库主要为台湾的一些公司和志愿者完成的繁体字库，简体中文矢量字库至今据他所知只有一个（台湾文鼎公司提供）。开 源中文字库的短缺从很大程度上使得中文Linux的发展依靠购买商业字库，国内红旗Linux就是其中一例。目前简体中文字库的这些诸多问题，造成了在 Linux下使用中文时候，很多中文字体显示效果极差，甚至无法显示。</p><p>“而如果拥有开源中文字库不仅可以满足可以在很大程度上满足上述需要。而且可以解决困扰大多数Linux中文用户费时费力的所谓“美化”问题，降低中文Linux入门门坎，促进Linux在国内用户中的发展”。</p><p>开源中文字体诞生需要热心参与</p><p>上万的汉字字体都需要人工地对点阵排布进行优化，即保证汉字结构的美观，又保证其易读性。而这些优化目前还没有有效的算法来自动实现，需要消耗开发者个人巨大的精力和时间，所以文泉驿项目需要很多热心的参与者。</p><p>房骞骞介绍说：“从目前网站的浏览记录来看，每天来自不同IP的浏览者大概有3000多个，每天平均点击数为8000多个。不过，真正参与汉 字开发的人还是相当有限，完成60个点阵或50个以上矢量汉字制作的参与者不超过70个；而能够自始至终支持这个计划、参与这个计划的志愿者不足10 个”。</p><p>由于这一项目的公益性、非商业性等问题没有资金来源，所以没有媒体愿意进行宣传。参与者不多、积极性也非常有限，网站的规模也因此受到很大程度的限制。</p><p>由于Wiki的开发方式，参与者之间是相对独立和松散的。参与者根据自己的时间特点选择适当的参与方式，而对于发送的点阵或者矢量字体，最后的质量审核、软件测试、文档和发布管理工作主要由少数的核心会员来负责。</p><p>其中ID为wanghong和ailantian的参与者，以无限的毅力和耐心分别对点阵和矢量汉字的开发做出过关键性的贡献； caiqian和fundawang在计划初期对计划发展提出过有价值的建议；tchaikov一直到现在仍然积极参与点阵“痛苦”、“枯燥”的审核和测 试工作；niqiu、fiag等朋友参与了很多开发工作，而且积极地在各种场合推广这个计划。</p><p>niqiu甚至自己印传单到高校去宣传。目前的开发团队都是通过参与计划相互联系和认识的。房骞骞说：“虽然他们当中很多我甚至只知道网络ID，但我对他们的贡献充满了敬佩和感激。”</p><p>不过幸运的是，温泉驿陆续收到了一些热心朋友的汇款资助，“虽然现在一共只有100美元左右，但至少明年的网站租用费可以解决，更重要的是，这些捐赠对于开发者来说是一种巨大的鼓舞”，房骞骞希望通过《电脑报》向他们表示特别的感谢。</p><p>文泉驿字体的现实和未来</p><p>2006年3月19日，文泉驿发布了开发代号为北斗的文泉半两宋体字体，版本号为v0.7。这个版本是通过半年多的努力，加上上万点阵的优 化，对每个字体无数细致的推敲和斟酌才产生的。这也可以说是目前这个开源中文计划的里程碑。文泉驿新点阵V0.7（北斗）无论从完整性、实用性还是从艺术 性来说，都较以前达到一个质的飞跃。</p><p>而矢量部分的开发工作基于房骞骞一个具有尝试性质的开发方法，他于去年4月正式发布了笔画分析的界面程序，至今，已经完成了19,816个 拥有开源图片的GBK汉字的笔画分析，900多个CJK扩展A区汉字和近4,000个CJK扩展B区汉字的分析工作。房骞骞介绍说：“这里面有1/5的汉 字可能需要重新制作，但如果进度顺利的话，我相信今年我们的开源矢量字体能与世人见面。”</p><p>可以相信，随着中文开源字体问题的解决，假以时日GNU/Linux下的中文信息显示瓶颈就可以得到解决了，那么基于GNU/Linux下的商业办公、文档处理和教育等相关软件的中文化问题都将迎刃而解了。</p><p>请大家支持文泉驿，不要沉迷于微软雅黑美化之类的研究了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;蓋文字者，經藝之本，王政之始&lt;/p&gt;&lt;p&gt;——说文解字序 许慎（东汉） 让汉字永远自由&lt;/p&gt;&lt;p&gt;也许现在你已经习惯每天面对电脑浏览互联网上的中文信息，和
    
    </summary>
    
      <category term="开源" scheme="https://fengchao.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>点名</title>
    <link href="https://fengchao.github.io/2017/03/22/Poll-2016/"/>
    <id>https://fengchao.github.io/2017/03/22/Poll-2016/</id>
    <published>2017-03-22T09:30:55.000Z</published>
    <updated>2017-03-22T09:33:39.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>1、2006你最开心的是什么？<br>回家</p><p>2、2006最难过的事是什么？<br>离别</p><p>3、2006冬天最大的心愿是什么？<br>忘记</p><p>4、最大的愿望<br>愿望能实现</p><p>5、如果现在可以让你随心所欲去旅行，你想去哪里？<br>The Matrix</p><p>6、你最满意自己身体哪个部位？<br>大脑</p><p>与别人初次见面你会注意他(她)哪个部位？<br>女生——头发<br>男生——看他旁边的女生</p><p>7、失眠过吗？你用什么办法对抗失眠？<br>上厕所</p><p>8、会不会做饭？希望你的伴侣会做饭吗？<br>不会，of cause</p><p>9、你最想做哪个动画片角色？为什么？<br>克罗诺 ，因为罗塞特</p><p>10、在你心中我是怎么样一个人？<br>蓝色</p><p>11、如果可以重来，你最想改变的是什么？<br>chaos ，什么也不敢动</p><p>也许应该改变的就是什么都不敢动，也许应该紧紧抓住蝴蝶的翅膀，也许应该重建世界观</p><p>12、觉得自己是个自恋的人吗？<br>不是</p><p>13、爱人爱到怎样的程度才算超过爱自己呢？<br>自己是谁？</p><p>14、你理想的伴侣应该具备什么样的品质？</p><p>参见问题9</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;1、2006你最开心的是什么？&lt;br&gt;回家&lt;/p&gt;&lt;p&gt;2、2006最难过的事是什么？&lt;br&gt;离别&lt;/p&gt;&lt;p&gt;3、2006冬天最大的心愿是什么？&lt;br&gt;忘
    
    </summary>
    
      <category term="个人" scheme="https://fengchao.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Wen-Chuan</title>
    <link href="https://fengchao.github.io/2017/03/22/Wen-Chuan/"/>
    <id>https://fengchao.github.io/2017/03/22/Wen-Chuan/</id>
    <published>2017-03-22T05:59:18.000Z</published>
    <updated>2017-03-22T05:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>在自然灾害面前，个人真的很渺小。几万人，转眼间就没了，想起来就揪心。今天听到灾区缺 AB 型血，下午就请假去了人民广场，排了 4 个小时的队，最后终于献了 400cc 。后面许多来到的人都被劝回去了，因为采血车没有那么大的处理能力，而且上海这边还没有正式向灾区调血。</p><p>最后的时候有一个49岁的老太太来献血，曾经插队到东北，献过三次血，下月就要 50 岁了，就不能献血了，所以今天特地来献血。感动得一塌糊涂。</p><p>灾区人民挺住，全国人民是你们的坚强后盾。</p><p>PS：今天居然在央视看到采访了，虽然是一闪而过。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;在自然灾害面前，个人真的很渺小。几万人，转眼间就没了，想起来就揪心。今天听到灾区缺 AB 型血，下午就请假去了人民广场，排了 4 个小时的队，最后终于献了 
    
    </summary>
    
      <category term="个人" scheme="https://fengchao.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>游戏中的心理学</title>
    <link href="https://fengchao.github.io/2017/02/07/Psychology-in-games/"/>
    <id>https://fengchao.github.io/2017/02/07/Psychology-in-games/</id>
    <published>2017-02-07T06:14:07.000Z</published>
    <updated>2017-02-07T06:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><ol><li>安全区</li></ol><p>使用一个英雄角色比较熟练的时候，不太愿意换用其它的英雄。因为不熟练，会导致胜率降低。</p><ol><li>self-serving bias</li></ol><p>当一个团队成功了的时候，每个人都会倾向于把成功归因于自己的贡献而忽略别人的存在；当一个团队失败了的时候，每个人都会倾向于把失败归咎于他人的过失而尽量把自己排除在外。</p><p>所以游戏位于逆风局的时候，更容易出现相互职责的现象。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;ol&gt;&lt;li&gt;安全区&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;使用一个英雄角色比较熟练的时候，不太愿意换用其它的英雄。因为不熟练，会导致胜率降低。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;sel
    
    </summary>
    
      <category term="心理学" scheme="https://fengchao.github.io/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Too good to last</title>
    <link href="https://fengchao.github.io/2017/02/06/Too-good-to-last/"/>
    <id>https://fengchao.github.io/2017/02/06/Too-good-to-last/</id>
    <published>2017-02-06T05:00:20.000Z</published>
    <updated>2017-02-06T05:02:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>When things seem too good to last, they usually don’t.</p><p>QQ 用这个签名已经很长时间了，第一次看到这句话，是在05年的时候。那时，美国的双赤字正在迅速扩大。当时许多人的看法是美国人借钱买东西，中国等亚洲国家赚钱，然后再把钱投资到美国是一件“符合经济规律”的正常事件。所以有人说美国无须为双赤字担忧，继续享受中国的廉价商品就行了，整个资金循环如下图所示。一篇文章分析了双赤字的来源之后，用 Maybe too good to last 结尾。作者虽然从直觉上认为这个经济大循环有问题，却无法知晓其后果是什么。所以只能说：看起来太好的事情，通常不会持久。</p><p>￼<img src="/images/MoneyFlow.jpg" alt="Money flow"></p><p>该来的总归要来，双赤字的根源是美国的低储蓄率，借贷消费乘着美联储低息的快车，最终酿成了当前的经济危机。</p><p>为了解决经济危机，美联储先是用尽了货币政策，现在几乎所有国家都启用“经济刺激计划”。在这些计划中，政府同时担当了“黑洞”和“白洞”的功能。黑洞是指央行直接收购垃圾资产，并为银行提供资产担保，无人敢碰的垃圾资产只要一进入美联储，立刻消失得无影无踪。白洞指千亿千亿的注资计划，似乎政府都有花不完的钱。一边不断吸入银行问题资产，一边向银行注资，而很少有人置疑政府行动能力的极限。这又是一件“太好的事情”。</p><p>按照常识，这个好事情不可能持久。也许这种方式不但不能救市，反而会引发更剧烈的危机。只不过这个世界还没有办法知道问题会在何时以何种方式演进。也许一个笑话可以提供一些线索：在美联储资产负债表的左边，什么都不对；在右边，什么都没剩。</p><p>Q: What’s wrong with the balance sheet of Wall Street banks?<br>A: On the left, nothing is right; on the right, nothing is left.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;When things seem too good to last, they usually don’t.&lt;/p&gt;&lt;p&gt;QQ 用这个签名已经很长时间了，第
    
    </summary>
    
      <category term="经济" scheme="https://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>商业模式</title>
    <link href="https://fengchao.github.io/2016/12/09/Business-mode/"/>
    <id>https://fengchao.github.io/2016/12/09/Business-mode/</id>
    <published>2016-12-09T06:48:47.000Z</published>
    <updated>2017-01-20T05:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><h2 id="商业模式的常见问题"><a href="#商业模式的常见问题" class="headerlink" title="商业模式的常见问题"></a>商业模式的常见问题</h2><ol><li>把企业愿景当作商业模式</li><li>平台类产品未认准自己的用户</li><li>简单的罗列自己的资源</li><li>追求大而全</li><li>缺乏可爆发性</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;商业模式的常见问题&quot;&gt;&lt;a href=&quot;#商业模式的常见问题&quot; class=&quot;headerlink&quot; title=&quot;商业模式的常见问题&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="经济" scheme="https://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>蓝海战略</title>
    <link href="https://fengchao.github.io/2016/12/07/Blue-Ocean-Strategy/"/>
    <id>https://fengchao.github.io/2016/12/07/Blue-Ocean-Strategy/</id>
    <published>2016-12-07T05:19:03.000Z</published>
    <updated>2017-01-20T05:58:41.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><h2 id="确立"><a href="#确立" class="headerlink" title="确立"></a>确立</h2><ul><li>重新确立市场边界</li><li>关注整体状况，而不是数字</li><li>超出现有需求</li><li>确保顺序正确</li></ul><h2 id="执行原则"><a href="#执行原则" class="headerlink" title="执行原则"></a>执行原则</h2><ul><li>解决组织限制</li><li>将执行加入战略</li></ul><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><ul><li>计划的风险</li><li>增长的风险</li><li>商业模式的风险</li><li>组织风险</li><li>管理风险</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;确立&quot;&gt;&lt;a href=&quot;#确立&quot; class=&quot;headerlink&quot; title=&quot;确立&quot;&gt;&lt;/a&gt;确立&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;重新确立市场
    
    </summary>
    
      <category term="经济" scheme="https://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="https://fengchao.github.io/2016/11/25/Npm/"/>
    <id>https://fengchao.github.io/2016/11/25/Npm/</id>
    <published>2016-11-25T01:34:29.000Z</published>
    <updated>2017-01-20T05:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><h2><a href="#" class="headerlink" title="^ ~"></a>^ ~</h2><p>Major. Minor.Bugfix</p><ul><li>^: 仅更新不涉及 API 变更的 Minor 版本</li><li>~: 仅更新问题修复版本</li></ul><pre><code>$npm update 
</code></pre><h2 id="latest"><a href="#latest" class="headerlink" title="@latest"></a>@latest</h2><p>查找有更新版本的软件包</p><pre><code>$ npm outdated
</code></pre><p>更新软件包</p><pre><code>$ npm install packagename@latest --save
</code></pre><p>处理不兼容的 API 调用</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;h2&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;^ ~&quot;&gt;&lt;/a&gt;^ ~&lt;/h2&gt;&lt;p&gt;Major. Minor.Bugfix
    
    </summary>
    
      <category term="代码" scheme="https://fengchao.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>时间管理，提升效率</title>
    <link href="https://fengchao.github.io/2016/11/15/Time-management/"/>
    <id>https://fengchao.github.io/2016/11/15/Time-management/</id>
    <published>2016-11-15T03:44:00.000Z</published>
    <updated>2017-01-20T05:24:33.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>Work = Time * Speed</p><p>时间是固定的，所以要收获更多，需要提高速度/效率.</p><h2 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h2><p>清楚自己到底要的是什么。集中经历做最重要的事情，避免在无关紧要的事情上浪费时间。</p><h2 id="减少打断"><a href="#减少打断" class="headerlink" title="减少打断"></a>减少打断</h2><p>大脑在每次任务切换后，都需要一些爬坡时间才能恢复到之前的效率。减少碎片化任务，避免被外部事情打断，就可以一直保持高效率。</p><h2 id="高效人士的七个习惯"><a href="#高效人士的七个习惯" class="headerlink" title="高效人士的七个习惯"></a>高效人士的七个习惯</h2><ul><li>Act Proactive: They take time to formulate their responses to situations<br>they find themselves in rather than simply making knee-jerk reactions to<br>them.</li><li>Begin with the End in Mind: They visualize the desired results and then<br>take the steps necessary to achieve them.</li><li>Put First Things First: As the masters of time management and<br>organization, they successfully prioritize their tasks to reach their goals.</li><li>Think Win/Win: They seek accords and results that are mutually satisfying<br>to everyone involved rather than simply seeking to triumph at any cost.</li><li>Seek First to Understand, and Then Be Understood: They practice<br>“empathic listening” whereby they listen to others with the intention of<br>understanding what others are saying, rather than preparing a reply to it.</li><li>Synergize: They practice creative cooperation whereby they remain<br>open to new possibilities, alternatives, and options.</li><li>Sharpen the Saw: They practice principles of balanced self-renewal that<br>enable them to reenergize themselves physically, mentally, socially, and<br>spiritually.</li></ul><h2 id="Getting-Things-Done"><a href="#Getting-Things-Done" class="headerlink" title="Getting Things Done"></a>Getting Things Done</h2><ul><li>Collect: This stage involves using your own preferred tools to accumulate<br>all of the stuff in your professional and personal lives that you consider<br>incomplete or requiring some sort of change.</li><li>Process: This stage involves determining the relative importance of<br>all the stuff you identify as incomplete and deciding what steps are<br>required to make them complete.</li><li>Organize: This stage involves deciding where to store all the stuff that<br>you determine still needs completing.</li><li>Review: This stage involves routinely reviewing (Allen usually recommends<br>on a weekly basis) all the stuff that you still identify as incomplete.</li><li>Do: This stage involves deciding whether or not the stuff you see as<br>incomplete is worth taking up now or at some later time.</li></ul><h2 id="记录待完成事项"><a href="#记录待完成事项" class="headerlink" title="记录待完成事项"></a>记录待完成事项</h2><p>将待完成事项记录下来，而不是脑子里，可以减少心理压力。清理列表，清理收件箱：</p><ul><li>Do It: You perform the action if you estimate that you can complete it<br>within two minutes or less (Allen’s two-minute rule).</li><li>Delegate It: You send it to someone else on the team if you determine<br>that you’re not the best person to undertake the action.</li><li>Defer It: You place it in a Someday or Snooze file if you determine that<br>you need more information to do it or it will take longer than a couple of<br>minutes.</li><li>Delete it: If you read a message (or its preview lines, if you view your<br>e-mail messages using Messages with AutoPreview as your current Mail<br>view) and find that it clearly falls into the junk category, move it into<br>your Deleted Items folder by pressing the Delete key.</li></ul><h2 id="专注于现在能够做的事情"><a href="#专注于现在能够做的事情" class="headerlink" title="专注于现在能够做的事情"></a>专注于现在能够做的事情</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;Work = Time * Speed&lt;/p&gt;&lt;p&gt;时间是固定的，所以要收获更多，需要提高速度/效率.&lt;/p&gt;&lt;h2 id=&quot;明确目标&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="效率" scheme="https://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>Scrapy - python spider</title>
    <link href="https://fengchao.github.io/2016/09/08/Scrapy-python-spider/"/>
    <id>https://fengchao.github.io/2016/09/08/Scrapy-python-spider/</id>
    <published>2016-09-08T07:46:18.000Z</published>
    <updated>2017-01-20T05:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p><a href="https://scrapy.org/" target="_blank" rel="external">Scrapy</a> 是一个 python 下面功能丰富、使用快捷方便的爬虫框架。</p><pre><code>    $ pip install scrapy

     $ cat &gt; myspider.py &lt;&lt;EOF
    import scrapy

    class BlogSpider(scrapy.Spider):
        name = &apos;blogspider&apos;
        start_urls = [&apos;https://blog.scrapinghub.com&apos;]

        def parse(self, response):
            for url in response.css(&apos;ul li a::attr(&quot;href&quot;)&apos;).re(&apos;.*/category/.*&apos;):
                yield scrapy.Request(response.urljoin(url), self.parse_titles)

        def parse_titles(self, response):
            for post_title in response.css(&apos;div.entries &gt; ul &gt; li a::text&apos;).extract():
                yield {&apos;title&apos;: post_title}
 EOF

$ scrapy runspider myspider.py
</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;&lt;a href=&quot;https://scrapy.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scrapy&lt;/a&gt; 是一个 py
    
    </summary>
    
      <category term="代码" scheme="https://fengchao.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>多线程-中断-效率</title>
    <link href="https://fengchao.github.io/2016/07/22/Mutithread-efficency/"/>
    <id>https://fengchao.github.io/2016/07/22/Mutithread-efficency/</id>
    <published>2016-07-22T09:36:52.000Z</published>
    <updated>2017-01-20T05:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>没有学过编程的人，也有多线程的经历: 一边走路，一边想事情；一边听音乐，一边学习。在计算机里面，多线程是为了提高效率。但是人类的大脑不是计算机，并不擅长多任务的同时处理。</p><p>每次中断一个任务，进入另外一个任务的时候，大脑都会经历一个转换过程。可能需要十分钟以上的时间，效率才能达到最高。所以每次中断，每次任务切换，都是效率杀手。从进化心理学上讲，古代人为了求生，必须把注意力集中，时刻应对外界威胁。如果注意力频繁切换，会有外界危险增多的暗示，增加心理压力。</p><p>解决方法：</p><ul><li>尽量保留不被任何事情打断的时间，高效率的处理重要问题.</li><li>多使用邮件等异步通信方式，减少手机、即时通信的使用。</li><li>关闭邮件通知，消息通知，微信通知，在集中的时间处理。使用 Pull，而不是中断。</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;没有学过编程的人，也有多线程的经历: 一边走路，一边想事情；一边听音乐，一边学习。在计算机里面，多线程是为了提高效率。但是人类的大脑不是计算机，并不擅长多任
    
    </summary>
    
      <category term="效率" scheme="https://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>斯托克代尔悖论</title>
    <link href="https://fengchao.github.io/2016/07/13/The-Stockdale-Paradox/"/>
    <id>https://fengchao.github.io/2016/07/13/The-Stockdale-Paradox/</id>
    <published>2016-07-13T01:08:17.000Z</published>
    <updated>2017-01-20T05:25:09.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>斯托克代尔是美国的一个海军上将，在越南战争期间，是被俘的美军里级别最高的将领。但他没有得到越南的丝毫优待，被拷打了20多次，关押了长达8年。他说：“我不知道自己能不能活着出去，还能不能见到自己的妻子和小孩。”但是他在监狱中表现得很坚强。越南人有一次为了表现他们优待俘虏，把他养了一段时间，准备给他拍照。结果斯托克代尔就自己用铁条把自己打得遍体鳞伤，并用刀片把自己的脸割破。越南人拿他没办法，只好放弃了。</p><p>他为了鼓励监狱中的同胞，因为是一个人关一间，彼此看不到，就发明了一种密码，通过敲墙用快慢节奏来表达英文字母。有次一位战俘因思念家人掩面痛哭的时候，他们全监狱的战俘都通过敲墙，用代码敲出了“我爱你”，那个战俘非常感动。</p><p>斯托克代尔被关押8年后放了出来。吉姆·柯林斯先生去采访他，问：“你为什么能熬过这艰难的8年？”斯托克代尔说：“因为我有一个信念，相信自己一定能出来，一定能够再见到我的妻子和孩子，这个信念一直支撑着我，使我生存了下来。”吉姆·柯林斯又问：“那你的同伴中最快死去的又是哪些人呢？”他回答说：“是那些太乐观的人。”吉姆·柯林斯说这不是很矛盾吗？为什么那些乐观的人会死得很快呢？斯托克代尔说：“他们总想着圣诞节可以被放出去了吧？圣诞节没被放出去；就想复活节可以被放出去，复活节没被放出去；就想着感恩节，而后又是圣诞节，结果一个失望接着一个失望，他们逐渐丧失了信心，再加上生存环境的恶劣，于是，他们郁郁而终。”斯托克代尔说：“对长远我有一个很强的信念，相信自己一定能够活着出去，一定能再见到我的妻子和小孩；但是我又正视现实的残酷。”</p><p>吉姆·柯林斯说：斯托克代尔悖论是持续50年能保持在世界500强的企业全部采用的理论。它们之所以能常青50年，是因为他们对前景充满乐观，相信前途一定是光明的，但是又直面现实的残酷。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;斯托克代尔是美国的一个海军上将，在越南战争期间，是被俘的美军里级别最高的将领。但他没有得到越南的丝毫优待，被拷打了20多次，关押了长达8年。他说：“我不知道
    
    </summary>
    
      <category term="心理学" scheme="https://fengchao.github.io/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Dvorak 键盘</title>
    <link href="https://fengchao.github.io/2016/07/12/Dvorak/"/>
    <id>https://fengchao.github.io/2016/07/12/Dvorak/</id>
    <published>2016-07-12T03:13:18.000Z</published>
    <updated>2017-01-20T05:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><h2 id="QWERT-键盘"><a href="#QWERT-键盘" class="headerlink" title="QWERT 键盘"></a>QWERT 键盘</h2><p>最初，打字机的键盘是按照字母顺序排列的，但如果打字速度过快，某些键的组合很容易出现卡键问题，于是克里斯托夫·拉森·寿司（Christopher Latham Sholes）发明了 QWERTY 键盘布局，他将最常用的几个字母安置在相反方向，最大限度放慢敲键速度以避免卡键。寿司在1868年申请专利，1873 年使用此布局的第一台商用打字机成功投放市场。这就是为什么有今天键盘的排列方式。</p><p>但具有讽刺意味的是，这种129年前形成的、以放慢敲键速度为目的的键盘排列方式却延续至今。1986年布鲁斯·伯里文爵士曾在《奇妙的书写机器》一文中表示：“QWERTY的安排方式非常没效率。”比如：大多数打字员惯用右手，但使用QWERTY，左手却负担了57%的工作。两小指及左无名指是最没力 气的指头，却频频要使用它们。排在中列的字母，其使用率仅占整个打字工作的30%左右，因此，为了打一个字，时常要上上下下移动指头。</p><h2 id="Dvorak-键盘"><a href="#Dvorak-键盘" class="headerlink" title="Dvorak 键盘"></a>Dvorak 键盘</h2><p>Dvorak键盘是August Dvorak (1894 - 1975) 在二十世纪三十年代发明的一种异于QWERTY的键盘布局。关于这种键盘布局的普通知识，请参阅<a href="http://www.mwbrooks.com/dvorak。" target="_blank" rel="external">http://www.mwbrooks.com/dvorak。</a> 而Dvorak键盘是长成这样的：</p><p><img src="/images/Dvorak.jpg" alt="Dvorak"></p><h2 id="使用-Dvorak"><a href="#使用-Dvorak" class="headerlink" title="使用 Dvorak"></a>使用 Dvorak</h2><p>作为一个完美主义者，了解了一般键盘的反人类设计，是没有办法抵制 Dvorak 的诱惑的。从 2010 年 3 月开始切换的 Dvorak，熟悉一段时间之后，已经可以完全用 Dvorak 工作了。</p><ul><li><p>Linux 下使用 Dvorak 参考 <a href="https://wiki.archlinux.org/index.php/Dvorak" target="_blank" rel="external">Arch Wiki</a></p></li><li><p>Windows 下使用 Dvorak布局，修改注册表</p></li></ul><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\00000804</p><p>将layout file改为 <strong>kbddv.dll</strong> 即可.这样中文输入法也是 Dvorak 了.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;QWERT-键盘&quot;&gt;&lt;a href=&quot;#QWERT-键盘&quot; class=&quot;headerlink&quot; title=&quot;QWERT 键盘&quot;&gt;&lt;/a&gt;QWE
    
    </summary>
    
      <category term="技术" scheme="https://fengchao.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>破釜沉舟学习法</title>
    <link href="https://fengchao.github.io/2016/07/06/Destory-books/"/>
    <id>https://fengchao.github.io/2016/07/06/Destory-books/</id>
    <published>2016-07-06T01:11:05.000Z</published>
    <updated>2017-01-20T05:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>很多人应该都有这样的经验：一本书，如果是买的，很可能仍在那里落灰；而如果是借的，因为有归还的压力会很快的读完。没有退路的时候，不光能让战士一往直前，还能让大脑更专注于记忆。</p><p>为了利用这个压力，一般我看书的时候会要求能完全了解页面的内容，不需要再回头看一遍。大学学英语的时候，看完一页书之后，会撕掉。书越看越薄，知识才真正到脑子里面。</p><p>从心理学上将，学了多少知识，是很难量化测量的。但是读了多少页书，撕了多少页书，却是可以量化的。通过这个量化，能够明确看到进展，学习的时候，就意识到事情正在朝向完成不断迈进，这种正面趋势所带来的积极情感能够进一步激励个体把事情执行到底。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;很多人应该都有这样的经验：一本书，如果是买的，很可能仍在那里落灰；而如果是借的，因为有归还的压力会很快的读完。没有退路的时候，不光能让战士一往直前，还能让大
    
    </summary>
    
      <category term="效率" scheme="https://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>攻克 Linux</title>
    <link href="https://fengchao.github.io/2016/07/06/Learn-linux-the-hard-way/"/>
    <id>https://fengchao.github.io/2016/07/06/Learn-linux-the-hard-way/</id>
    <published>2016-07-06T01:10:03.000Z</published>
    <updated>2017-01-20T05:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p><a href="http://fengchao.github.io/2016/07/05/Archive-what-you-think/">上一篇文章</a>提到当克服一个困难的事情之后，剩下的事情就简单了。学习 Linux 也是如此，通过安装 Arch，Gentoo，Linux from scratch，会对整个 Linux 系统有更深刻的理解。</p><h1 id="Arch"><a href="#Arch" class="headerlink" title="Arch"></a>Arch</h1><ul><li><a href="https://www.archlinux.org/" target="_blank" rel="external">主页</a></li><li><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="external">安装指南</a></li></ul><h1 id="Gentoo"><a href="#Gentoo" class="headerlink" title="Gentoo"></a>Gentoo</h1><p>Gentoo 和 Linux From Scratch 简直是绝配。从某种意义上说，Gentoo 安装的 Stage3，就是 Linux From Scratch 前面准备的编译环境。Linux From Scratch 提供了最基本的系统，而 Gentoo 则是用一种优雅的方式管理软件包的下载、自动补丁和依赖关系解决。和 Ubuntu 不同，Gentoo 提供了最大的灵活性，用户可以按照自己的喜好进行选择而不是简单的提供默认选项。用 Gentoo 一年多了，系统基本没有出过什么问题，滚动升级，不但可以使用最新的软件，而且降低了一次升级许多软件包而产生的危险。即时出了问题，也更容易缩小范围，发现问题的所在。但是 Gentoo 也不是没有问题，编译安装需要不少时间，在以前我在台式机中用 xfce 最小安装，还算可以接受。现在换了笔记本，一直那么高负荷编译，发热大，硬盘也会吃不消。所以有了换 Arch 的打算。</p><h1 id="Linux-from-scratch"><a href="#Linux-from-scratch" class="headerlink" title="Linux from scratch"></a>Linux from scratch</h1><p>也许 LFS 不应该被成为一个发行版，因为基本上它只是一个供人学习的工具，通过从 0 开始一步一步安装系统需要的程序。我对这个系统的使用，仅限于从头到尾安装了两次，而装完之后就立即删掉了。但是通过 Linux From Scratch,我对操作系统的认识产生了质的飞跃。在之前，光操作系统这个词都能把我镇住。而从头装卸了一次之后，突然间豁然开朗，操作系统整个的解体了，“提刀而立，为之四顾，为之踌躇满志，善刀而藏之”。所以向每个希望了解操作系统的人推荐这个系统。安装下来，可能需要花费两三天的时间，但是学到的东西，比用 Ubuntu 两三年都要多。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;&lt;a href=&quot;http://fengchao.github.io/2016/07/05/Archive-what-you-think/&quot;&gt;上一篇文章&lt;/
    
    </summary>
    
      <category term="Linux" scheme="https://fengchao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>会当临绝顶</title>
    <link href="https://fengchao.github.io/2016/07/05/Archive-what-you-think/"/>
    <id>https://fengchao.github.io/2016/07/05/Archive-what-you-think/</id>
    <published>2016-07-05T05:06:43.000Z</published>
    <updated>2017-01-20T05:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>人的主观能有多大的魔力，是一个哲学问题。曾经经历过的几个事情，促使我做一些思考和总结。</p><h2 id="爬黄山"><a href="#爬黄山" class="headerlink" title="爬黄山"></a>爬黄山</h2><p>六岁的时候，父亲带我去爬黄山。上山的路都是自己走的，包括天都峰。当时确实很累，但是咬牙坚持下来了。那时候太小，是不懂什么“会当临绝顶，一览众山小”的，只知道云海很好看。</p><p>后来很长一段时间，都觉得自己内心有一股劲，遇到困难的时候，想想自己爬过黄山，就咬牙坚持。后来想想，这股劲，就是毅力吧。这股毅力，是战胜了一次困难之后产生的。当你战胜了它，所有比它小的困难，都是可以克服的。</p><blockquote><p>“世界上有两种人，赢家和失败者，两者的区别在于，赢家从不放弃…”</p></blockquote><h2 id="退学者"><a href="#退学者" class="headerlink" title="退学者"></a>退学者</h2><p>大二开始的时候，系里面有一个人因为玩游戏太多，挂科太多，被劝退。后来听说，这个同学回去之后重新高考，直接考上清华，数学还是满分。</p><p>听到这个消息时，内心还是很震撼，也许有一丝的嫉妒和不甘心。当时已经感觉出来：高三上三年和上了大一再回来上高三，有一种难以言喻差距存在。因为学习过高数，再看高中数学，不要太简单。</p><p>同样的时间，一直在低水平的地方重复，效果并不大。</p><p>克服了高数，高中数学就是那众山小。<br>克服了泛函，线性代数就是那众山小。</p><h2 id="攀岩"><a href="#攀岩" class="headerlink" title="攀岩"></a>攀岩</h2><p>大四毕业的时候，和同学一起去攀岩。同样一个道，开始的时候，每个人都爬不到顶。也许是爬道中间确实有些地方有点难。直到有一个女生，尝试很多次终于通过了困难区，攀到顶端。然后奇迹出现了，后面的每个人，都能爬道顶了。</p><p>攀岩回去之后，整个手都抖的不行，两天抬不起来，两天一直思考这个事情。前面的人，因为没有人成功过，所以老是以为我也不行。而当认识到这个事情是可能的时候，就可以成功了，这就是榜样的力量。</p><p>所谓的榜样，就是让人真正相信，之前不可能的事情，现在是可行的了。一个人临绝顶，天下人看众山小。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;人的主观能有多大的魔力，是一个哲学问题。曾经经历过的几个事情，促使我做一些思考和总结。&lt;/p&gt;&lt;h2 id=&quot;爬黄山&quot;&gt;&lt;a href=&quot;#爬黄山&quot; cla
    
    </summary>
    
      <category term="心理学" scheme="https://fengchao.github.io/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>最难解的代码问题</title>
    <link href="https://fengchao.github.io/2016/07/05/Hard-Bugs/"/>
    <id>https://fengchao.github.io/2016/07/05/Hard-Bugs/</id>
    <published>2016-07-05T02:13:11.000Z</published>
    <updated>2017-01-20T05:52:25.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>由于C语言的本身设计非常贴近底层，所以会有一些坑，很容易出问题。回想一下之前遇到的难解问题，大概包括下面几类：</p><h3 id="越界访问"><a href="#越界访问" class="headerlink" title="越界访问"></a>越界访问</h3><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h3 id="堆栈溢出"><a href="#堆栈溢出" class="headerlink" title="堆栈溢出"></a>堆栈溢出</h3><p>Linux 的堆栈是比较小的，32 位系统上是 8KB，64 位系统上是 16KB。所以使用静态变量，长调用栈时要非常小心。</p><p>因为堆栈后面会有 Thread 的重要信息，所以堆栈溢出后，很可能看到调用栈都是乱七八糟的。</p><p>最近 Linux 内核有计划将堆栈使用的直接映射内存变为虚拟映射内存。这样可以通过映射表检查是否有堆栈溢出访问，堆栈溢出的错误会更容易发现和调试。</p><h3 id="多次回收-Double-free"><a href="#多次回收-Double-free" class="headerlink" title="多次回收 (Double free)"></a>多次回收 (Double free)</h3><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;由于C语言的本身设计非常贴近底层，所以会有一些坑，很容易出问题。回想一下之前遇到的难解问题，大概包括下面几类：&lt;/p&gt;&lt;h3 id=&quot;越界访问&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="代码" scheme="https://fengchao.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>建立社群的步骤</title>
    <link href="https://fengchao.github.io/2016/06/30/How-to-create-community/"/>
    <id>https://fengchao.github.io/2016/06/30/How-to-create-community/</id>
    <published>2016-06-30T03:27:49.000Z</published>
    <updated>2017-01-20T05:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><h3 id="1-重新定义目标用户群体，确立产品定位"><a href="#1-重新定义目标用户群体，确立产品定位" class="headerlink" title="1. 重新定义目标用户群体，确立产品定位"></a>1. 重新定义目标用户群体，确立产品定位</h3><ul><li>确定目标人群，用户画像</li><li>设计联系成员的纽带</li></ul><h3 id="2-寻找初始用户"><a href="#2-寻找初始用户" class="headerlink" title="2. 寻找初始用户"></a>2. 寻找初始用户</h3><h3 id="3-策划社群活动，强化身份认同"><a href="#3-策划社群活动，强化身份认同" class="headerlink" title="3. 策划社群活动，强化身份认同"></a>3. 策划社群活动，强化身份认同</h3><h3 id="4-社群裂变，培植自组织"><a href="#4-社群裂变，培植自组织" class="headerlink" title="4. 社群裂变，培植自组织"></a>4. 社群裂变，培植自组织</h3><h3 id="5-建章立制，健全社群运营机制"><a href="#5-建章立制，健全社群运营机制" class="headerlink" title="5. 建章立制，健全社群运营机制"></a>5. 建章立制，健全社群运营机制</h3><ul><li>评价机制</li><li>激励机制</li><li>会员积分体系</li><li>游戏化等级</li></ul><h3 id="6-社群文化"><a href="#6-社群文化" class="headerlink" title="6. 社群文化"></a>6. 社群文化</h3><p>部落群体必须具备三个特征：</p><ul><li>相似的文化</li><li>频繁的互动</li><li>共同的利益</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;h3 id=&quot;1-重新定义目标用户群体，确立产品定位&quot;&gt;&lt;a href=&quot;#1-重新定义目标用户群体，确立产品定位&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="经济" scheme="https://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>创新者的窘境</title>
    <link href="https://fengchao.github.io/2016/06/28/The-Innovators-Dilemma/"/>
    <id>https://fengchao.github.io/2016/06/28/The-Innovators-Dilemma/</id>
    <published>2016-06-28T02:31:57.000Z</published>
    <updated>2017-01-20T05:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>具有领先优势的大公司，在面对突破性的技术创新时，失去了竞争优势，被后起者超越。《创新者的窘境》这本书希望找到问题原因</p><h2 id="原因总结"><a href="#原因总结" class="headerlink" title="原因总结"></a>原因总结</h2><ol><li>资源分配的重心是满足当前用户，所以创新产品得不到足够的重视。</li><li>公司规模和市场规模不匹配。新技术的市场规模开始时都比较小，大公司会忽略这个小市场。</li><li>新的市场可能是不存在的，所以很难去分析。不但是未知的，而且是不可知的。</li><li>害怕失败，不愿意离开安全区。</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>创建与世隔绝的科研基地，封闭开发。</li><li>将突破性技术商业化的责任交给一个足够小的机构。</li><li>在未知市场试错，发现新的机会。避免传统的绩效考核方式。</li><li>创业公司、孵化器。</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;具有领先优势的大公司，在面对突破性的技术创新时，失去了竞争优势，被后起者超越。《创新者的窘境》这本书希望找到问题原因&lt;/p&gt;&lt;h2 id=&quot;原因总结&quot;&gt;&lt;a
    
    </summary>
    
      <category term="经济" scheme="https://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>技术类型和典型缺陷</title>
    <link href="https://fengchao.github.io/2016/06/23/Tech-Type-and-solution/"/>
    <id>https://fengchao.github.io/2016/06/23/Tech-Type-and-solution/</id>
    <published>2016-06-23T09:56:13.000Z</published>
    <updated>2017-01-20T05:27:10.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --><p>不同的技术类型，有不同的缺陷，需要重点关注和加强：</p><p><img src="/images/Tech_person_type.jpg" alt="Type"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jun 07 2017 15:23:08 GMT+0800 (CST) --&gt;&lt;p&gt;不同的技术类型，有不同的缺陷，需要重点关注和加强：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/Tech_person_type.jpg&quot; alt=&quot;T
    
    </summary>
    
      <category term="效率" scheme="https://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
</feed>
