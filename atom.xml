<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chaospace</title>
  <subtitle>Reshape the world by engineering chaos</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fengchao.github.io/"/>
  <updated>2017-02-06T05:02:41.587Z</updated>
  <id>http://fengchao.github.io/</id>
  
  <author>
    <name>Feng Chao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Too good to last</title>
    <link href="http://fengchao.github.io/2017/02/06/Too-good-to-last/"/>
    <id>http://fengchao.github.io/2017/02/06/Too-good-to-last/</id>
    <published>2017-02-06T05:00:20.000Z</published>
    <updated>2017-02-06T05:02:41.587Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>When things seem too good to last, they usually don’t.</p><p>QQ 用这个签名已经很长时间了，第一次看到这句话，是在05年的时候。那时，美国的双赤字正在迅速扩大。当时许多人的看法是美国人借钱买东西，中国等亚洲国家赚钱，然后再把钱投资到美国是一件“符合经济规律”的正常事件。所以有人说美国无须为双赤字担忧，继续享受中国的廉价商品就行了，整个资金循环如下图所示。一篇文章分析了双赤字的来源之后，用 Maybe too good to last 结尾。作者虽然从直觉上认为这个经济大循环有问题，却无法知晓其后果是什么。所以只能说：看起来太好的事情，通常不会持久。</p><p>￼<img src="/images/MoneyFlow.jpg" alt="Money flow"></p><p>该来的总归要来，双赤字的根源是美国的低储蓄率，借贷消费乘着美联储低息的快车，最终酿成了当前的经济危机。</p><p>为了解决经济危机，美联储先是用尽了货币政策，现在几乎所有国家都启用“经济刺激计划”。在这些计划中，政府同时担当了“黑洞”和“白洞”的功能。黑洞是指央行直接收购垃圾资产，并为银行提供资产担保，无人敢碰的垃圾资产只要一进入美联储，立刻消失得无影无踪。白洞指千亿千亿的注资计划，似乎政府都有花不完的钱。一边不断吸入银行问题资产，一边向银行注资，而很少有人置疑政府行动能力的极限。这又是一件“太好的事情”。</p><p>按照常识，这个好事情不可能持久。也许这种方式不但不能救市，反而会引发更剧烈的危机。只不过这个世界还没有办法知道问题会在何时以何种方式演进。也许一个笑话可以提供一些线索：在美联储资产负债表的左边，什么都不对；在右边，什么都没剩。</p><p>Q: What’s wrong with the balance sheet of Wall Street banks?<br>A: On the left, nothing is right; on the right, nothing is left.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;When things seem too good to last, they usually don’t.&lt;/p&gt;&lt;p&gt;QQ 用这个签名已经很长时间了，第
    
    </summary>
    
      <category term="经济" scheme="http://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>商业模式</title>
    <link href="http://fengchao.github.io/2016/12/09/Business-mode/"/>
    <id>http://fengchao.github.io/2016/12/09/Business-mode/</id>
    <published>2016-12-09T06:48:47.000Z</published>
    <updated>2017-01-20T05:58:36.471Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><h2 id="商业模式的常见问题"><a href="#商业模式的常见问题" class="headerlink" title="商业模式的常见问题"></a>商业模式的常见问题</h2><ol><li>把企业愿景当作商业模式</li><li>平台类产品未认准自己的用户</li><li>简单的罗列自己的资源</li><li>追求大而全</li><li>缺乏可爆发性</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;商业模式的常见问题&quot;&gt;&lt;a href=&quot;#商业模式的常见问题&quot; class=&quot;headerlink&quot; title=&quot;商业模式的常见问题&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="经济" scheme="http://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>蓝海战略</title>
    <link href="http://fengchao.github.io/2016/12/07/Blue-Ocean-Strategy/"/>
    <id>http://fengchao.github.io/2016/12/07/Blue-Ocean-Strategy/</id>
    <published>2016-12-07T05:19:03.000Z</published>
    <updated>2017-01-20T05:58:41.934Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><h2 id="确立"><a href="#确立" class="headerlink" title="确立"></a>确立</h2><ul><li>重新确立市场边界</li><li>关注整体状况，而不是数字</li><li>超出现有需求</li><li>确保顺序正确</li></ul><h2 id="执行原则"><a href="#执行原则" class="headerlink" title="执行原则"></a>执行原则</h2><ul><li>解决组织限制</li><li>将执行加入战略</li></ul><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><ul><li>计划的风险</li><li>增长的风险</li><li>商业模式的风险</li><li>组织风险</li><li>管理风险</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;确立&quot;&gt;&lt;a href=&quot;#确立&quot; class=&quot;headerlink&quot; title=&quot;确立&quot;&gt;&lt;/a&gt;确立&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;重新确立市场
    
    </summary>
    
      <category term="经济" scheme="http://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="http://fengchao.github.io/2016/11/25/npm/"/>
    <id>http://fengchao.github.io/2016/11/25/npm/</id>
    <published>2016-11-25T01:34:29.000Z</published>
    <updated>2017-01-20T05:45:47.801Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><h2><a href="#" class="headerlink" title="^ ~"></a>^ ~</h2><p>Major. Minor.Bugfix</p><ul><li>^: 仅更新不涉及 API 变更的 Minor 版本</li><li>~: 仅更新问题修复版本</li></ul><pre><code>$npm update 
</code></pre><h2 id="latest"><a href="#latest" class="headerlink" title="@latest"></a>@latest</h2><p>查找有更新版本的软件包</p><pre><code>$ npm outdated
</code></pre><p>更新软件包</p><pre><code>$ npm install packagename@latest --save
</code></pre><p>处理不兼容的 API 调用</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;h2&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;^ ~&quot;&gt;&lt;/a&gt;^ ~&lt;/h2&gt;&lt;p&gt;Major. Minor.Bugfix
    
    </summary>
    
      <category term="代码" scheme="http://fengchao.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>时间管理，提升效率</title>
    <link href="http://fengchao.github.io/2016/11/15/Time-management/"/>
    <id>http://fengchao.github.io/2016/11/15/Time-management/</id>
    <published>2016-11-15T03:44:00.000Z</published>
    <updated>2017-01-20T05:24:33.894Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>Work = Time * Speed</p><p>时间是固定的，所以要收获更多，需要提高速度/效率.</p><h2 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h2><p>清楚自己到底要的是什么。集中经历做最重要的事情，避免在无关紧要的事情上浪费时间。</p><h2 id="减少打断"><a href="#减少打断" class="headerlink" title="减少打断"></a>减少打断</h2><p>大脑在每次任务切换后，都需要一些爬坡时间才能恢复到之前的效率。减少碎片化任务，避免被外部事情打断，就可以一直保持高效率。</p><h2 id="高效人士的七个习惯"><a href="#高效人士的七个习惯" class="headerlink" title="高效人士的七个习惯"></a>高效人士的七个习惯</h2><ul><li>Act Proactive: They take time to formulate their responses to situations<br>they find themselves in rather than simply making knee-jerk reactions to<br>them.</li><li>Begin with the End in Mind: They visualize the desired results and then<br>take the steps necessary to achieve them.</li><li>Put First Things First: As the masters of time management and<br>organization, they successfully prioritize their tasks to reach their goals.</li><li>Think Win/Win: They seek accords and results that are mutually satisfying<br>to everyone involved rather than simply seeking to triumph at any cost.</li><li>Seek First to Understand, and Then Be Understood: They practice<br>“empathic listening” whereby they listen to others with the intention of<br>understanding what others are saying, rather than preparing a reply to it.</li><li>Synergize: They practice creative cooperation whereby they remain<br>open to new possibilities, alternatives, and options.</li><li>Sharpen the Saw: They practice principles of balanced self-renewal that<br>enable them to reenergize themselves physically, mentally, socially, and<br>spiritually.</li></ul><h2 id="Getting-Things-Done"><a href="#Getting-Things-Done" class="headerlink" title="Getting Things Done"></a>Getting Things Done</h2><ul><li>Collect: This stage involves using your own preferred tools to accumulate<br>all of the stuff in your professional and personal lives that you consider<br>incomplete or requiring some sort of change.</li><li>Process: This stage involves determining the relative importance of<br>all the stuff you identify as incomplete and deciding what steps are<br>required to make them complete.</li><li>Organize: This stage involves deciding where to store all the stuff that<br>you determine still needs completing.</li><li>Review: This stage involves routinely reviewing (Allen usually recommends<br>on a weekly basis) all the stuff that you still identify as incomplete.</li><li>Do: This stage involves deciding whether or not the stuff you see as<br>incomplete is worth taking up now or at some later time.</li></ul><h2 id="记录待完成事项"><a href="#记录待完成事项" class="headerlink" title="记录待完成事项"></a>记录待完成事项</h2><p>将待完成事项记录下来，而不是脑子里，可以减少心理压力。清理列表，清理收件箱：</p><ul><li>Do It: You perform the action if you estimate that you can complete it<br>within two minutes or less (Allen’s two-minute rule).</li><li>Delegate It: You send it to someone else on the team if you determine<br>that you’re not the best person to undertake the action.</li><li>Defer It: You place it in a Someday or Snooze file if you determine that<br>you need more information to do it or it will take longer than a couple of<br>minutes.</li><li>Delete it: If you read a message (or its preview lines, if you view your<br>e-mail messages using Messages with AutoPreview as your current Mail<br>view) and find that it clearly falls into the junk category, move it into<br>your Deleted Items folder by pressing the Delete key.</li></ul><h2 id="专注于现在能够做的事情"><a href="#专注于现在能够做的事情" class="headerlink" title="专注于现在能够做的事情"></a>专注于现在能够做的事情</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;Work = Time * Speed&lt;/p&gt;&lt;p&gt;时间是固定的，所以要收获更多，需要提高速度/效率.&lt;/p&gt;&lt;h2 id=&quot;明确目标&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="效率" scheme="http://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>Scrapy - python spider</title>
    <link href="http://fengchao.github.io/2016/09/08/Scrapy-python-spider/"/>
    <id>http://fengchao.github.io/2016/09/08/Scrapy-python-spider/</id>
    <published>2016-09-08T07:46:18.000Z</published>
    <updated>2017-01-20T05:43:00.501Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p><a href="https://scrapy.org/" target="_blank" rel="external">Scrapy</a> 是一个 python 下面功能丰富、使用快捷方便的爬虫框架。</p><pre><code>    $ pip install scrapy

     $ cat &gt; myspider.py &lt;&lt;EOF
    import scrapy

    class BlogSpider(scrapy.Spider):
        name = &apos;blogspider&apos;
        start_urls = [&apos;https://blog.scrapinghub.com&apos;]

        def parse(self, response):
            for url in response.css(&apos;ul li a::attr(&quot;href&quot;)&apos;).re(&apos;.*/category/.*&apos;):
                yield scrapy.Request(response.urljoin(url), self.parse_titles)

        def parse_titles(self, response):
            for post_title in response.css(&apos;div.entries &gt; ul &gt; li a::text&apos;).extract():
                yield {&apos;title&apos;: post_title}
 EOF

$ scrapy runspider myspider.py
</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;&lt;a href=&quot;https://scrapy.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scrapy&lt;/a&gt; 是一个 py
    
    </summary>
    
      <category term="代码" scheme="http://fengchao.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>多线程-中断-效率</title>
    <link href="http://fengchao.github.io/2016/07/22/Mutithread-efficency/"/>
    <id>http://fengchao.github.io/2016/07/22/Mutithread-efficency/</id>
    <published>2016-07-22T09:36:52.000Z</published>
    <updated>2017-01-20T05:46:56.011Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>没有学过编程的人，也有多线程的经历: 一边走路，一边想事情；一边听音乐，一边学习。在计算机里面，多线程是为了提高效率。但是人类的大脑不是计算机，并不擅长多任务的同时处理。</p><p>每次中断一个任务，进入另外一个任务的时候，大脑都会经历一个转换过程。可能需要十分钟以上的时间，效率才能达到最高。所以每次中断，每次任务切换，都是效率杀手。从进化心理学上讲，古代人为了求生，必须把注意力集中，时刻应对外界威胁。如果注意力频繁切换，会有外界危险增多的暗示，增加心理压力。</p><p>解决方法：</p><ul><li>尽量保留不被任何事情打断的时间，高效率的处理重要问题.</li><li>多使用邮件等异步通信方式，减少手机、即时通信的使用。</li><li>关闭邮件通知，消息通知，微信通知，在集中的时间处理。使用 Pull，而不是中断。</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;没有学过编程的人，也有多线程的经历: 一边走路，一边想事情；一边听音乐，一边学习。在计算机里面，多线程是为了提高效率。但是人类的大脑不是计算机，并不擅长多任
    
    </summary>
    
      <category term="效率" scheme="http://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>斯托克代尔悖论</title>
    <link href="http://fengchao.github.io/2016/07/13/The-Stockdale-Paradox/"/>
    <id>http://fengchao.github.io/2016/07/13/The-Stockdale-Paradox/</id>
    <published>2016-07-13T01:08:17.000Z</published>
    <updated>2017-01-20T05:25:09.218Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>斯托克代尔是美国的一个海军上将，在越南战争期间，是被俘的美军里级别最高的将领。但他没有得到越南的丝毫优待，被拷打了20多次，关押了长达8年。他说：“我不知道自己能不能活着出去，还能不能见到自己的妻子和小孩。”但是他在监狱中表现得很坚强。越南人有一次为了表现他们优待俘虏，把他养了一段时间，准备给他拍照。结果斯托克代尔就自己用铁条把自己打得遍体鳞伤，并用刀片把自己的脸割破。越南人拿他没办法，只好放弃了。</p><p>他为了鼓励监狱中的同胞，因为是一个人关一间，彼此看不到，就发明了一种密码，通过敲墙用快慢节奏来表达英文字母。有次一位战俘因思念家人掩面痛哭的时候，他们全监狱的战俘都通过敲墙，用代码敲出了“我爱你”，那个战俘非常感动。</p><p>斯托克代尔被关押8年后放了出来。吉姆·柯林斯先生去采访他，问：“你为什么能熬过这艰难的8年？”斯托克代尔说：“因为我有一个信念，相信自己一定能出来，一定能够再见到我的妻子和孩子，这个信念一直支撑着我，使我生存了下来。”吉姆·柯林斯又问：“那你的同伴中最快死去的又是哪些人呢？”他回答说：“是那些太乐观的人。”吉姆·柯林斯说这不是很矛盾吗？为什么那些乐观的人会死得很快呢？斯托克代尔说：“他们总想着圣诞节可以被放出去了吧？圣诞节没被放出去；就想复活节可以被放出去，复活节没被放出去；就想着感恩节，而后又是圣诞节，结果一个失望接着一个失望，他们逐渐丧失了信心，再加上生存环境的恶劣，于是，他们郁郁而终。”斯托克代尔说：“对长远我有一个很强的信念，相信自己一定能够活着出去，一定能再见到我的妻子和小孩；但是我又正视现实的残酷。”</p><p>吉姆·柯林斯说：斯托克代尔悖论是持续50年能保持在世界500强的企业全部采用的理论。它们之所以能常青50年，是因为他们对前景充满乐观，相信前途一定是光明的，但是又直面现实的残酷。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;斯托克代尔是美国的一个海军上将，在越南战争期间，是被俘的美军里级别最高的将领。但他没有得到越南的丝毫优待，被拷打了20多次，关押了长达8年。他说：“我不知道
    
    </summary>
    
      <category term="心理学" scheme="http://fengchao.github.io/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Dvorak 键盘</title>
    <link href="http://fengchao.github.io/2016/07/12/Dvorak/"/>
    <id>http://fengchao.github.io/2016/07/12/Dvorak/</id>
    <published>2016-07-12T03:13:18.000Z</published>
    <updated>2017-01-20T05:57:30.564Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><h2 id="QWERT-键盘"><a href="#QWERT-键盘" class="headerlink" title="QWERT 键盘"></a>QWERT 键盘</h2><p>最初，打字机的键盘是按照字母顺序排列的，但如果打字速度过快，某些键的组合很容易出现卡键问题，于是克里斯托夫·拉森·寿司（Christopher Latham Sholes）发明了 QWERTY 键盘布局，他将最常用的几个字母安置在相反方向，最大限度放慢敲键速度以避免卡键。寿司在1868年申请专利，1873 年使用此布局的第一台商用打字机成功投放市场。这就是为什么有今天键盘的排列方式。</p><p>但具有讽刺意味的是，这种129年前形成的、以放慢敲键速度为目的的键盘排列方式却延续至今。1986年布鲁斯·伯里文爵士曾在《奇妙的书写机器》一文中表示：“QWERTY的安排方式非常没效率。”比如：大多数打字员惯用右手，但使用QWERTY，左手却负担了57%的工作。两小指及左无名指是最没力 气的指头，却频频要使用它们。排在中列的字母，其使用率仅占整个打字工作的30%左右，因此，为了打一个字，时常要上上下下移动指头。</p><h2 id="Dvorak-键盘"><a href="#Dvorak-键盘" class="headerlink" title="Dvorak 键盘"></a>Dvorak 键盘</h2><p>Dvorak键盘是August Dvorak (1894 - 1975) 在二十世纪三十年代发明的一种异于QWERTY的键盘布局。关于这种键盘布局的普通知识，请参阅<a href="http://www.mwbrooks.com/dvorak。" target="_blank" rel="external">http://www.mwbrooks.com/dvorak。</a> 而Dvorak键盘是长成这样的：</p><p><img src="/images/Dvorak.jpg" alt="Dvorak"></p><h2 id="使用-Dvorak"><a href="#使用-Dvorak" class="headerlink" title="使用 Dvorak"></a>使用 Dvorak</h2><p>作为一个完美主义者，了解了一般键盘的反人类设计，是没有办法抵制 Dvorak 的诱惑的。从 2010 年 3 月开始切换的 Dvorak，熟悉一段时间之后，已经可以完全用 Dvorak 工作了。</p><ul><li><p>Linux 下使用 Dvorak 参考 <a href="https://wiki.archlinux.org/index.php/Dvorak" target="_blank" rel="external">Arch Wiki</a></p></li><li><p>Windows 下使用 Dvorak布局，修改注册表</p></li></ul><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\00000804</p><p>将layout file改为 <strong>kbddv.dll</strong> 即可.这样中文输入法也是 Dvorak 了.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;QWERT-键盘&quot;&gt;&lt;a href=&quot;#QWERT-键盘&quot; class=&quot;headerlink&quot; title=&quot;QWERT 键盘&quot;&gt;&lt;/a&gt;QWE
    
    </summary>
    
      <category term="技术" scheme="http://fengchao.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>破釜沉舟学习法</title>
    <link href="http://fengchao.github.io/2016/07/06/Destory-books/"/>
    <id>http://fengchao.github.io/2016/07/06/Destory-books/</id>
    <published>2016-07-06T01:11:05.000Z</published>
    <updated>2017-01-20T05:57:56.454Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>很多人应该都有这样的经验：一本书，如果是买的，很可能仍在那里落灰；而如果是借的，因为有归还的压力会很快的读完。没有退路的时候，不光能让战士一往直前，还能让大脑更专注于记忆。</p><p>为了利用这个压力，一般我看书的时候会要求能完全了解页面的内容，不需要再回头看一遍。大学学英语的时候，看完一页书之后，会撕掉。书越看越薄，知识才真正到脑子里面。</p><p>从心理学上将，学了多少知识，是很难量化测量的。但是读了多少页书，撕了多少页书，却是可以量化的。通过这个量化，能够明确看到进展，学习的时候，就意识到事情正在朝向完成不断迈进，这种正面趋势所带来的积极情感能够进一步激励个体把事情执行到底。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;很多人应该都有这样的经验：一本书，如果是买的，很可能仍在那里落灰；而如果是借的，因为有归还的压力会很快的读完。没有退路的时候，不光能让战士一往直前，还能让大
    
    </summary>
    
      <category term="效率" scheme="http://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>攻克 Linux</title>
    <link href="http://fengchao.github.io/2016/07/06/Learn-linux-the-hard-way/"/>
    <id>http://fengchao.github.io/2016/07/06/Learn-linux-the-hard-way/</id>
    <published>2016-07-06T01:10:03.000Z</published>
    <updated>2017-01-20T05:49:05.948Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p><a href="http://fengchao.github.io/2016/07/05/Archive-what-you-think/">上一篇文章</a>提到当克服一个困难的事情之后，剩下的事情就简单了。学习 Linux 也是如此，通过安装 Arch，Gentoo，Linux from scratch，会对整个 Linux 系统有更深刻的理解。</p><h1 id="Arch"><a href="#Arch" class="headerlink" title="Arch"></a>Arch</h1><ul><li><a href="https://www.archlinux.org/" target="_blank" rel="external">主页</a></li><li><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="external">安装指南</a></li></ul><h1 id="Gentoo"><a href="#Gentoo" class="headerlink" title="Gentoo"></a>Gentoo</h1><p>Gentoo 和 Linux From Scratch 简直是绝配。从某种意义上说，Gentoo 安装的 Stage3，就是 Linux From Scratch 前面准备的编译环境。Linux From Scratch 提供了最基本的系统，而 Gentoo 则是用一种优雅的方式管理软件包的下载、自动补丁和依赖关系解决。和 Ubuntu 不同，Gentoo 提供了最大的灵活性，用户可以按照自己的喜好进行选择而不是简单的提供默认选项。用 Gentoo 一年多了，系统基本没有出过什么问题，滚动升级，不但可以使用最新的软件，而且降低了一次升级许多软件包而产生的危险。即时出了问题，也更容易缩小范围，发现问题的所在。但是 Gentoo 也不是没有问题，编译安装需要不少时间，在以前我在台式机中用 xfce 最小安装，还算可以接受。现在换了笔记本，一直那么高负荷编译，发热大，硬盘也会吃不消。所以有了换 Arch 的打算。</p><h1 id="Linux-from-scratch"><a href="#Linux-from-scratch" class="headerlink" title="Linux from scratch"></a>Linux from scratch</h1><p>也许 LFS 不应该被成为一个发行版，因为基本上它只是一个供人学习的工具，通过从 0 开始一步一步安装系统需要的程序。我对这个系统的使用，仅限于从头到尾安装了两次，而装完之后就立即删掉了。但是通过 Linux From Scratch,我对操作系统的认识产生了质的飞跃。在之前，光操作系统这个词都能把我镇住。而从头装卸了一次之后，突然间豁然开朗，操作系统整个的解体了，“提刀而立，为之四顾，为之踌躇满志，善刀而藏之”。所以向每个希望了解操作系统的人推荐这个系统。安装下来，可能需要花费两三天的时间，但是学到的东西，比用 Ubuntu 两三年都要多。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;&lt;a href=&quot;http://fengchao.github.io/2016/07/05/Archive-what-you-think/&quot;&gt;上一篇文章&lt;/
    
    </summary>
    
      <category term="Linux" scheme="http://fengchao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>会当临绝顶</title>
    <link href="http://fengchao.github.io/2016/07/05/Archive-what-you-think/"/>
    <id>http://fengchao.github.io/2016/07/05/Archive-what-you-think/</id>
    <published>2016-07-05T05:06:43.000Z</published>
    <updated>2017-01-20T05:59:06.241Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>人的主观能有多大的魔力，是一个哲学问题。曾经经历过的几个事情，促使我做一些思考和总结。</p><h2 id="爬黄山"><a href="#爬黄山" class="headerlink" title="爬黄山"></a>爬黄山</h2><p>六岁的时候，父亲带我去爬黄山。上山的路都是自己走的，包括天都峰。当时确实很累，但是咬牙坚持下来了。那时候太小，是不懂什么“会当临绝顶，一览众山小”的，只知道云海很好看。</p><p>后来很长一段时间，都觉得自己内心有一股劲，遇到困难的时候，想想自己爬过黄山，就咬牙坚持。后来想想，这股劲，就是毅力吧。这股毅力，是战胜了一次困难之后产生的。当你战胜了它，所有比它小的困难，都是可以克服的。</p><blockquote><p>“世界上有两种人，赢家和失败者，两者的区别在于，赢家从不放弃…”</p></blockquote><h2 id="退学者"><a href="#退学者" class="headerlink" title="退学者"></a>退学者</h2><p>大二开始的时候，系里面有一个人因为玩游戏太多，挂科太多，被劝退。后来听说，这个同学回去之后重新高考，直接考上清华，数学还是满分。</p><p>听到这个消息时，内心还是很震撼，也许有一丝的嫉妒和不甘心。当时已经感觉出来：高三上三年和上了大一再回来上高三，有一种难以言喻差距存在。因为学习过高数，再看高中数学，不要太简单。</p><p>同样的时间，一直在低水平的地方重复，效果并不大。</p><p>克服了高数，高中数学就是那众山小。<br>克服了泛函，线性代数就是那众山小。</p><h2 id="攀岩"><a href="#攀岩" class="headerlink" title="攀岩"></a>攀岩</h2><p>大四毕业的时候，和同学一起去攀岩。同样一个道，开始的时候，每个人都爬不到顶。也许是爬道中间确实有些地方有点难。直到有一个女生，尝试很多次终于通过了困难区，攀到顶端。然后奇迹出现了，后面的每个人，都能爬道顶了。</p><p>攀岩回去之后，整个手都抖的不行，两天抬不起来，两天一直思考这个事情。前面的人，因为没有人成功过，所以老是以为我也不行。而当认识到这个事情是可能的时候，就可以成功了，这就是榜样的力量。</p><p>所谓的榜样，就是让人真正相信，之前不可能的事情，现在是可行的了。一个人临绝顶，天下人看众山小。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;人的主观能有多大的魔力，是一个哲学问题。曾经经历过的几个事情，促使我做一些思考和总结。&lt;/p&gt;&lt;h2 id=&quot;爬黄山&quot;&gt;&lt;a href=&quot;#爬黄山&quot; cla
    
    </summary>
    
      <category term="心理学" scheme="http://fengchao.github.io/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>最难解的代码问题</title>
    <link href="http://fengchao.github.io/2016/07/05/Hard-Bugs/"/>
    <id>http://fengchao.github.io/2016/07/05/Hard-Bugs/</id>
    <published>2016-07-05T02:13:11.000Z</published>
    <updated>2017-01-20T05:52:25.014Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>由于C语言的本身设计非常贴近底层，所以会有一些坑，很容易出问题。回想一下之前遇到的难解问题，大概包括下面几类：</p><h3 id="越界访问"><a href="#越界访问" class="headerlink" title="越界访问"></a>越界访问</h3><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h3 id="堆栈溢出"><a href="#堆栈溢出" class="headerlink" title="堆栈溢出"></a>堆栈溢出</h3><p>Linux 的堆栈是比较小的，32 位系统上是 8KB，64 位系统上是 16KB。所以使用静态变量，长调用栈时要非常小心。</p><p>因为堆栈后面会有 Thread 的重要信息，所以堆栈溢出后，很可能看到调用栈都是乱七八糟的。</p><p>最近 Linux 内核有计划将堆栈使用的直接映射内存变为虚拟映射内存。这样可以通过映射表检查是否有堆栈溢出访问，堆栈溢出的错误会更容易发现和调试。</p><h3 id="多次回收-Double-free"><a href="#多次回收-Double-free" class="headerlink" title="多次回收 (Double free)"></a>多次回收 (Double free)</h3><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;由于C语言的本身设计非常贴近底层，所以会有一些坑，很容易出问题。回想一下之前遇到的难解问题，大概包括下面几类：&lt;/p&gt;&lt;h3 id=&quot;越界访问&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="代码" scheme="http://fengchao.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>建立社群的步骤</title>
    <link href="http://fengchao.github.io/2016/06/30/How-to-create-community/"/>
    <id>http://fengchao.github.io/2016/06/30/How-to-create-community/</id>
    <published>2016-06-30T03:27:49.000Z</published>
    <updated>2017-01-20T05:51:42.201Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><h3 id="1-重新定义目标用户群体，确立产品定位"><a href="#1-重新定义目标用户群体，确立产品定位" class="headerlink" title="1. 重新定义目标用户群体，确立产品定位"></a>1. 重新定义目标用户群体，确立产品定位</h3><ul><li>确定目标人群，用户画像</li><li>设计联系成员的纽带</li></ul><h3 id="2-寻找初始用户"><a href="#2-寻找初始用户" class="headerlink" title="2. 寻找初始用户"></a>2. 寻找初始用户</h3><h3 id="3-策划社群活动，强化身份认同"><a href="#3-策划社群活动，强化身份认同" class="headerlink" title="3. 策划社群活动，强化身份认同"></a>3. 策划社群活动，强化身份认同</h3><h3 id="4-社群裂变，培植自组织"><a href="#4-社群裂变，培植自组织" class="headerlink" title="4. 社群裂变，培植自组织"></a>4. 社群裂变，培植自组织</h3><h3 id="5-建章立制，健全社群运营机制"><a href="#5-建章立制，健全社群运营机制" class="headerlink" title="5. 建章立制，健全社群运营机制"></a>5. 建章立制，健全社群运营机制</h3><ul><li>评价机制</li><li>激励机制</li><li>会员积分体系</li><li>游戏化等级</li></ul><h3 id="6-社群文化"><a href="#6-社群文化" class="headerlink" title="6. 社群文化"></a>6. 社群文化</h3><p>部落群体必须具备三个特征：</p><ul><li>相似的文化</li><li>频繁的互动</li><li>共同的利益</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;h3 id=&quot;1-重新定义目标用户群体，确立产品定位&quot;&gt;&lt;a href=&quot;#1-重新定义目标用户群体，确立产品定位&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="经济" scheme="http://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>创新者的窘境</title>
    <link href="http://fengchao.github.io/2016/06/28/The-Innovators-Dilemma/"/>
    <id>http://fengchao.github.io/2016/06/28/The-Innovators-Dilemma/</id>
    <published>2016-06-28T02:31:57.000Z</published>
    <updated>2017-01-20T05:25:25.214Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>具有领先优势的大公司，在面对突破性的技术创新时，失去了竞争优势，被后起者超越。《创新者的窘境》这本书希望找到问题原因</p><h2 id="原因总结"><a href="#原因总结" class="headerlink" title="原因总结"></a>原因总结</h2><ol><li>资源分配的重心是满足当前用户，所以创新产品得不到足够的重视。</li><li>公司规模和市场规模不匹配。新技术的市场规模开始时都比较小，大公司会忽略这个小市场。</li><li>新的市场可能是不存在的，所以很难去分析。不但是未知的，而且是不可知的。</li><li>害怕失败，不愿意离开安全区。</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>创建与世隔绝的科研基地，封闭开发。</li><li>将突破性技术商业化的责任交给一个足够小的机构。</li><li>在未知市场试错，发现新的机会。避免传统的绩效考核方式。</li><li>创业公司、孵化器。</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;具有领先优势的大公司，在面对突破性的技术创新时，失去了竞争优势，被后起者超越。《创新者的窘境》这本书希望找到问题原因&lt;/p&gt;&lt;h2 id=&quot;原因总结&quot;&gt;&lt;a
    
    </summary>
    
      <category term="经济" scheme="http://fengchao.github.io/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>技术类型和典型缺陷</title>
    <link href="http://fengchao.github.io/2016/06/23/Tech-Type-and-solution/"/>
    <id>http://fengchao.github.io/2016/06/23/Tech-Type-and-solution/</id>
    <published>2016-06-23T09:56:13.000Z</published>
    <updated>2017-01-20T05:27:10.001Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p>不同的技术类型，有不同的缺陷，需要重点关注和加强：</p><p><img src="/images/Tech_person_type.jpg" alt="Type"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;不同的技术类型，有不同的缺陷，需要重点关注和加强：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/Tech_person_type.jpg&quot; alt=&quot;T
    
    </summary>
    
      <category term="效率" scheme="http://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>甲骨文告谷歌 - 输了</title>
    <link href="http://fengchao.github.io/2016/06/14/Google-win-Oracle/"/>
    <id>http://fengchao.github.io/2016/06/14/Google-win-Oracle/</id>
    <published>2016-06-14T06:34:38.000Z</published>
    <updated>2017-01-20T05:55:40.994Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><h3 id="Java-开源十年"><a href="#Java-开源十年" class="headerlink" title="Java 开源十年"></a>Java 开源十年</h3><p>十年前 <a href="http://fengchao.github.io/2006/11/16/Sun-Opens-Java/">Sun 开源 Java</a> 的时候，普天同庆。一个新的世界展现在 Java 眼前，一个开源的 Java 吸引力更多开发者和公司的贡献。十年间，</p><p>谷歌做了 Android，用 Java 作为软件开发语言。Android 凭借开源属性，和苹果展开激烈竞争，成为世界第一手机操作系统。</p><h3 id="专利流氓搅局"><a href="#专利流氓搅局" class="headerlink" title="专利流氓搅局"></a>专利流氓搅局</h3><p>甲骨文收购了 Sun，但是花了很多年时间，依然搞不清楚怎么通过开源软件盈利，看到 Android 这么风生水起，显然眼红的不行。于是拿起专利大棒，状告谷歌侵权并索赔 90 亿美元。</p><p>甲骨文自己在 Java 开发上鲜有作为，却暗指谷歌 Android 的成功完全是 Java 带来的，说的好像自己也能搞出来一个 Android 似的，在专利流氓的道路上越走越远。</p><p>旧金山联邦法庭陪审团今日已做出裁决，认定谷歌 Android 并未侵犯 Oracle 所有的 Java 版权。Google 表示，陪审团的认定代表了 Android 生态体系、Java 开发社区以及依靠开放免费编程语言开发创新消费者产品的软件开发者的胜利。松下一口气的不只有 Google，也包括成千上万的软件开发者。</p><h3 id="阴霾笼罩-Java"><a href="#阴霾笼罩-Java" class="headerlink" title="阴霾笼罩 Java"></a>阴霾笼罩 Java</h3><p>虽然官司赢了，但是 Java 的开源道路已经蒙上了厚厚的阴霾。很多公司再做创新性开发的时候，一定会考虑避免再拿 Java 作为核心组件。毕竟不是每个公司都能像谷歌一样请到最好的律师，能够和甲骨文巨头搞法律对战。</p><p>微软一直想做，但是没有做成的事情，甲骨文做到了。</p><p>软件版权，已经成为创新的障碍；软件版权，应该消亡。</p><p><img src="/images/conways_law.png" alt="Sun 开源 Java"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;h3 id=&quot;Java-开源十年&quot;&gt;&lt;a href=&quot;#Java-开源十年&quot; class=&quot;headerlink&quot; title=&quot;Java 开源十年&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="开源" scheme="http://fengchao.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Tmux 快速指南</title>
    <link href="http://fengchao.github.io/2016/06/13/Tmux/"/>
    <id>http://fengchao.github.io/2016/06/13/Tmux/</id>
    <published>2016-06-13T03:17:28.000Z</published>
    <updated>2017-01-20T05:24:21.058Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>启动</td><td>tmux</td></tr><tr><td>帮助</td><td>^b ?</td></tr></tbody></table><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>新建会话</td><td>tmux new-session -s play</td></tr><tr><td>重命名会话</td><td>tmux rename-session tutorial</td></tr><tr><td>查看会话</td><td>tmux ls</td></tr><tr><td>加入会话</td><td>tmux attach -t ‘’session’’</td></tr><tr><td>脱离会话</td><td>^b d</td></tr></tbody></table><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>创建窗口</td><td>^b c</td></tr><tr><td>关闭窗口</td><td>^d</td></tr><tr><td>下个窗口</td><td>^b n</td></tr><tr><td>上个窗口</td><td>^b p</td></tr><tr><td>最后窗口</td><td>^b l</td></tr><tr><td>选择窗口</td><td>^b w</td></tr><tr><td>查找窗口</td><td>^b f</td></tr></tbody></table><h2 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h2><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>水平分割</td><td>^b %</td></tr><tr><td>垂直分割</td><td>^b “</td></tr><tr><td>切换</td><td>^b o</td></tr><tr><td>放大</td><td>^b z</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;
    
    </summary>
    
      <category term="技术" scheme="http://fengchao.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>开源漏斗模型</title>
    <link href="http://fengchao.github.io/2016/06/12/Open-source-funnel/"/>
    <id>http://fengchao.github.io/2016/06/12/Open-source-funnel/</id>
    <published>2016-06-12T08:08:03.000Z</published>
    <updated>2017-01-20T05:44:36.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><p><img src="/images/Funnel.png" alt="Funnel" title="Funnel"></p><h2 id="销售漏斗"><a href="#销售漏斗" class="headerlink" title="销售漏斗"></a>销售漏斗</h2><p>销售中有一个经典的漏斗模型，一个用户需要一系列步骤才会真正购买。在每一个步骤上，都会有用户止步不前，所以最终购买的用户仅仅是潜在用户的很小一部分。</p><ol><li>潜在客户</li><li>了解产品</li><li>浏览网页</li><li>产生购买欲望</li><li>点击购物车</li><li>网银付款</li><li>快递收货</li><li>实际使用</li></ol><h2 id="开发漏斗"><a href="#开发漏斗" class="headerlink" title="开发漏斗"></a>开发漏斗</h2><p>同样，在开源开发中也有类似的漏斗模型存在:</p><ol><li>使用产品</li><li>参与社区讨论</li><li>首次参与贡献</li><li>长期开发者</li><li>核心开发者</li></ol><p>同样的，每一步都会有开发者止步不前，只有极少数人会成为核心开发者。所以为了提高最终的成功可能，获得更多的开发者，一个开源产品也需要进行运营工作。</p><h2 id="运营开源产品"><a href="#运营开源产品" class="headerlink" title="运营开源产品"></a>运营开源产品</h2><h3 id="用户社区"><a href="#用户社区" class="headerlink" title="用户社区"></a>用户社区</h3><p>互联网经济中，所有公司都已经大大提高了对用户社区的重视程度。对开源产品来说，更是如此。很多开源项目都有非常活跃的论坛、IRC、邮件列表等等，老用户帮助新用户。</p><h3 id="首次贡献"><a href="#首次贡献" class="headerlink" title="首次贡献"></a>首次贡献</h3><p>大部分用户开源软件的首次贡献，都是在使用的过程中遇到 Bug。为了解决自己遇到的问题，就去查看代码，找到问题原因，并提交补丁。</p><p>和封闭系统相比，开源系统大大降低了活跃用户参与贡献的难度。尤其是 <a href="https://github.com/" target="_blank" rel="external">Github</a> 的 pull request 机制，更是简化了 patch 提交和合并流程。为了让更多的用户进行首次贡献，一个开源项目最好提供一份快速启动手册，一个专门的页面介绍如何进行贡献。</p><h3 id="长期贡献"><a href="#长期贡献" class="headerlink" title="长期贡献"></a>长期贡献</h3><p>首次贡献变为长期贡献，是一个很艰难的过程。除了解决自己的问题，还是需要额外的动力。对于开源软件来说，商业社会惯用的钱已经起不了作用了。</p><p>不为钱，则为利。需要给这些开发者足够的荣誉，比如贡献者列表等等。激发人对内心自我实现的渴望。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;p&gt;&lt;img src=&quot;/images/Funnel.png&quot; alt=&quot;Funnel&quot; title=&quot;Funnel&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;销售漏斗&quot;&gt;&lt;a
    
    </summary>
    
      <category term="开源" scheme="http://fengchao.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么你会不堪重负</title>
    <link href="http://fengchao.github.io/2016/06/08/why-people-burn-out/"/>
    <id>http://fengchao.github.io/2016/06/08/why-people-burn-out/</id>
    <published>2016-06-08T08:35:28.000Z</published>
    <updated>2017-01-20T05:22:27.788Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --><h3 id="强迫证明自己"><a href="#强迫证明自己" class="headerlink" title="强迫证明自己"></a>强迫证明自己</h3><p>通常情况下都是具有过度的野心。这欲望本是用来证明自己的，但在工作场所，这个欲望往往变成决心和强制性的。</p><h3 id="更加努力的工作"><a href="#更加努力的工作" class="headerlink" title="更加努力的工作"></a>更加努力的工作</h3><p>为了融入一个不适合自己的组织，为自己定了较高的期望值。为了满足这些期望，他们往往只专注于工作，而且他们愿意承担更多的工作。这往往都会让他们任何事都要亲自作为，这都是为了表明他们是最好的，因为他们不需要他人的帮助完成更多的工作量。</p><h3 id="忽略需求"><a href="#忽略需求" class="headerlink" title="忽略需求"></a>忽略需求</h3><p>因为他们一心只关注与工作，他们几乎没有时间和精力再做别的事情。与朋友，家人聚餐和吃饭，睡觉一般的生理需求已经被他们视为不重要的了，因为这会浪费他们的时间。</p><h3 id="冲突转移"><a href="#冲突转移" class="headerlink" title="冲突转移"></a>冲突转移</h3><p>他们开始意识到某些地方不太对劲，但他们无法正确归因。这可能导致他们激烈的内心冲突进而引发一系列的身体症状——这是他们首先表现出身体症状的阶段。</p><h3 id="价值观重组"><a href="#价值观重组" class="headerlink" title="价值观重组"></a>价值观重组</h3><p>在这个阶段，他们将自己无形中隔离，规避与他人的冲突，并且因为他们认知模式的改变，他们否认或是拒绝自己正当的生理需要。他们的价值观体系也随之改变。工作占据了他们能支配的所有精力，从而他们再没有关照朋友或者家人的功夫。他们新的价值观围绕着工作，并且他们开始变得情感迟钝。</p><h3 id="否认暴露的问题"><a href="#否认暴露的问题" class="headerlink" title="否认暴露的问题"></a>否认暴露的问题</h3><p>他们开始变得偏执。他们不再喜欢社会生活，如果要他们参加社交活动的话，他们会觉得那几乎无法忍受。对他们了解不多的局外人可能会看到他们显示出更加强烈的攻击性。人们常常会发现，他们越发倾向于抱怨他们的工作是多么庞杂难以完成，他们的时间是如何不够他们支配，而非他们自己是否做出了什么改变。</p><h3 id="自闭"><a href="#自闭" class="headerlink" title="自闭"></a>自闭</h3><p>他们的社交只维持在最小限度，并且很快他们自己陷入自闭的状态之中。酒精和兴奋性药物可能会被滥用用来在他们满负荷的工作之余排解他们的压力。他们在这个阶段开始常常经历无助感和无方向感。</p><h3 id="自显著的行为改变"><a href="#自显著的行为改变" class="headerlink" title="自显著的行为改变"></a>自显著的行为改变</h3><p>他们的同事，家人，朋友以及他们社交圈中的其他人会显著注意到他们行为上的改变。</p><h3 id="人格解体"><a href="#人格解体" class="headerlink" title="人格解体"></a>人格解体</h3><p>他们与自己失去了沟通，也就很难在他们自己或是他人身上看到任何价值之所在。与此同时，他们失去了对自己个人需求的响应。他们对生活的观念下降到只关注现有的时间，他们的人生变成了一系列的机械的功能组合。</p><h3 id="内心空虚"><a href="#内心空虚" class="headerlink" title="内心空虚"></a>内心空虚</h3><p>他们感到内心空虚。为了规避这一点，他们可能会去找其他乐子，暴饮暴食，乱性，酒精或者毒品。这些行为可能会非常夸张。</p><h3 id="抑郁"><a href="#抑郁" class="headerlink" title="抑郁"></a>抑郁</h3><p>心力交瘁可能带来抑郁。他们感到疲惫不堪，绝望，冷漠，并且认为未来的生活对他们毫无意义。典型的抑郁症状开始出现。</p><h3 id="心力交瘁综合症"><a href="#心力交瘁综合症" class="headerlink" title="心力交瘁综合症"></a>心力交瘁综合症</h3><p>身心崩溃。在这个阶段，他们应该立即寻求医疗的帮助。在极端的抑郁状况下，可能会出现自杀意念——自杀被这时的他们视为一种逃离现有状况的方式。但只有很少一部分人会实施自杀。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Feb 06 2017 13:02:55 GMT+0800 (CST) --&gt;&lt;h3 id=&quot;强迫证明自己&quot;&gt;&lt;a href=&quot;#强迫证明自己&quot; class=&quot;headerlink&quot; title=&quot;强迫证明自己&quot;&gt;&lt;/a&gt;强迫证明自己&lt;/h
    
    </summary>
    
      <category term="效率" scheme="http://fengchao.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
</feed>
